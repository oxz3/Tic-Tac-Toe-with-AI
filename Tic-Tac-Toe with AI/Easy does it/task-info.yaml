type: edu
custom_name: stage2
files:
- name: src/tictactoe/Main.java
  visible: true
  text: "package tictactoe;\nimport java.util.Scanner;\n\npublic class Main {\n  \
    \      static int xCount = 0;\n        static int oCount = 0;\n        \n    public\
    \ static void main(String[] args) {\n        // write your code here\n       \
    \ Scanner keyboard = new Scanner(System.in);\n\n        System.out.print(\"Enter\
    \ cells: \");\n        String input = keyboard.next();\n        int counter =\
    \ 0;\n        int cord1 = 0;\n        int cord2 = 0;\n        boolean legalMove\
    \ = false;\n\n        String[][] board = new String[3][3];\n\n        // input\
    \ into grid\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0;\
    \ j < 3; j++) {\n                board[i][j] = Character.toString(input.charAt(counter));\n\
    \                counter++;\n            }\n        }\n\n        printBoard(board);\n\
    /*        // print out gameboard\n        System.out.println(\"---------\");\n\
    \        for (int i = 0; i < 3; i++) {\n            System.out.print(\"| \");\n\
    \            for (int j = 0; j < 3; j++) {\n                if (board[i][j].equals(\"\
    _\"))\n                    System.out.print(\"  \");\n                else {\n\
    \                    System.out.print(board[i][j] + \" \");\n                \
    \    if (board[i][j].equals(\"X\"))\n                        xCount++;\n     \
    \               else if (board[i][j].equals(\"O\"))\n                        oCount++;\n\
    \                }\n            }\n            System.out.println(\"|\");\n  \
    \      }\n        System.out.println(\"---------\");\n*/\n\n        do {\n   \
    \             System.out.print(\"Enter the coordinates: \");\n            \n \
    \           try {\n                cord1 = keyboard.nextInt();\n             \
    \   cord2 = keyboard.nextInt();\n                if (((cord1 > 3) || (cord2 >\
    \ 3)) || ((cord1 < 0) || (cord2 < 0)) == true)\n                    System.out.println(\"\
    Coordinates should be from 1 to 3!\");\n                else {\n             \
    \       legalMove = true;\n                    if (board[3 - cord2][cord1 - 1]\
    \ != \"_\") {\n                        System.out.println(\"This cell is occupied!\
    \ Choose another one!\");\n                        legalMove = false;\n      \
    \              }\n                    else {\n                        if (xCount\
    \ == oCount)\n                            board[3 - cord2][cord1 - 1] = \"X\"\
    ;\n                        else\n                            board[3 - cord2][cord1\
    \ - 1] = \"O\";\n                    }\n                }\n                \n\
    \            \n            } catch (Exception e) {\n                System.out.println(\"\
    You should enter numbers!\");\n            }           \n                \n  \
    \      } while (legalMove == false);\n        \n        printBoard(board);\n \
    \       \n        // check for win conditions\n        if (((board[0][0].equals(\"\
    X\")) && (board[0][1].equals(\"X\")) && (board[0][2].equals(\"X\")) == true) ||\n\
    \        ((board[1][0].equals(\"X\")) && (board[1][1].equals(\"X\")) && (board[1][2].equals(\"\
    X\")) == true) ||\n        ((board[2][0].equals(\"X\")) && (board[2][1].equals(\"\
    X\")) && (board[2][2].equals(\"X\")) == true) ||\n        ((board[0][0].equals(\"\
    X\")) && (board[1][0].equals(\"X\")) && (board[2][0].equals(\"X\")) == true) ||\n\
    \        ((board[0][1].equals(\"X\")) && (board[1][1].equals(\"X\")) && (board[2][1].equals(\"\
    X\")) == true) ||\n        ((board[0][2].equals(\"X\")) && (board[1][2].equals(\"\
    X\")) && (board[2][2].equals(\"X\")) == true) ||\n        ((board[0][0].equals(\"\
    X\")) && (board[1][1].equals(\"X\")) && (board[2][2].equals(\"X\")) == true) ||\n\
    \        ((board[2][0].equals(\"X\")) && (board[1][1].equals(\"X\")) && (board[0][2].equals(\"\
    X\")) == true))\n            System.out.print(\"X wins\");\n        else if (((board[0][0].equals(\"\
    O\")) && (board[0][1].equals(\"O\")) && (board[0][2].equals(\"O\")) == true) ||\n\
    \        ((board[1][0].equals(\"O\")) && (board[1][1].equals(\"O\")) && (board[1][2].equals(\"\
    O\")) == true) ||\n        ((board[2][0].equals(\"O\")) && (board[2][1].equals(\"\
    O\")) && (board[2][2].equals(\"O\")) == true) ||\n        ((board[0][0].equals(\"\
    O\")) && (board[1][0].equals(\"O\")) && (board[2][0].equals(\"O\")) == true) ||\n\
    \        ((board[0][1].equals(\"O\")) && (board[1][1].equals(\"O\")) && (board[2][1].equals(\"\
    O\")) == true) ||\n        ((board[0][2].equals(\"O\")) && (board[1][2].equals(\"\
    O\")) && (board[2][2].equals(\"O\")) == true) ||\n        ((board[0][0].equals(\"\
    O\")) && (board[1][1].equals(\"O\")) && (board[2][2].equals(\"O\")) == true) ||\n\
    \        ((board[2][0].equals(\"O\")) && (board[1][1].equals(\"O\")) && (board[0][2].equals(\"\
    O\")) == true))\n            System.out.print(\"O wins\");\n        else if (xCount\
    \ == 5)\n            System.out.print(\"Draw\");\n        else   \n          \
    \  System.out.print(\"Game not finished\");\n            \n    }\n    \n    public\
    \ static void printBoard(String[][] board) {\n        // print out gameboard\n\
    \        System.out.println(\"---------\");\n        for (int i = 0; i < 3; i++)\
    \ {\n            System.out.print(\"| \");\n            for (int j = 0; j < 3;\
    \ j++) {\n                if (board[i][j].equals(\"_\"))\n                   \
    \ System.out.print(\"  \");\n                else {\n                    System.out.print(board[i][j]\
    \ + \" \");\n                    if (board[i][j].equals(\"X\"))\n            \
    \            xCount++;\n                    else if (board[i][j].equals(\"O\"\
    ))\n                        oCount++;\n                }\n            }\n    \
    \        System.out.println(\"|\");\n        }\n        System.out.println(\"\
    ---------\");\n    }\n}\n\n\n"
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }
            return fields;
        }
    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            if (!reply.contains("Making move level \"easy\"")) {
                return new CheckResult(false,
                    "No \"Making move level \"easy\"\" line in output");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/81/stages/448/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/448/implement">JetBrains
    Academy</a>
  time: Tue, 18 Aug 2020 08:03:35 UTC
record: 2
